using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using SFML.Window;

namespace Cardamom.Interface
{
    public class KeyController
    {
        public const char LeftArrow = (char)17;
        public const char RightArrow = (char)19;
        public const char DownArrow = (char)20;
        public const char UpArrow = (char)18;
        private static Keyboard.Key[] Keys = new Keyboard.Key[]
        {
            Keyboard.Key.A,
            Keyboard.Key.Add,
            Keyboard.Key.B,
            Keyboard.Key.Back,
            Keyboard.Key.BackSlash,
            Keyboard.Key.C,
            Keyboard.Key.Comma,
            Keyboard.Key.D,
            Keyboard.Key.Dash,
            Keyboard.Key.Delete,
            Keyboard.Key.Divide,
            Keyboard.Key.Down,
            Keyboard.Key.E,
            Keyboard.Key.End,
            Keyboard.Key.Equal,
            Keyboard.Key.Escape,
            Keyboard.Key.F,
            Keyboard.Key.F1,
            Keyboard.Key.F10,
            Keyboard.Key.F11,
            Keyboard.Key.F12,
            Keyboard.Key.F13,
            Keyboard.Key.F14,
            Keyboard.Key.F15,
            Keyboard.Key.F2,
            Keyboard.Key.F3,
            Keyboard.Key.F4,
            Keyboard.Key.F5,
            Keyboard.Key.F6,
            Keyboard.Key.F7,
            Keyboard.Key.F8,
            Keyboard.Key.F9,
            Keyboard.Key.G,
            Keyboard.Key.H,
            Keyboard.Key.Home,
            Keyboard.Key.I,
            Keyboard.Key.Insert,
            Keyboard.Key.J,
            Keyboard.Key.K,
            Keyboard.Key.KeyCount,
            Keyboard.Key.L,
            Keyboard.Key.LAlt,
            Keyboard.Key.LBracket,
            Keyboard.Key.LControl,
            Keyboard.Key.Left,
            Keyboard.Key.LShift,
            Keyboard.Key.LSystem,
            Keyboard.Key.M,
            Keyboard.Key.Menu,
            Keyboard.Key.Multiply,
            Keyboard.Key.N,
            Keyboard.Key.Num0,
            Keyboard.Key.Num1,
            Keyboard.Key.Num2,
            Keyboard.Key.Num3,
            Keyboard.Key.Num4,
            Keyboard.Key.Num5,
            Keyboard.Key.Num6,
            Keyboard.Key.Num7,
            Keyboard.Key.Num8,
            Keyboard.Key.Num9,
            Keyboard.Key.Numpad0,
            Keyboard.Key.Numpad1,
            Keyboard.Key.Numpad2,
            Keyboard.Key.Numpad3,
            Keyboard.Key.Numpad4,
            Keyboard.Key.Numpad5,
            Keyboard.Key.Numpad6,
            Keyboard.Key.Numpad7,
            Keyboard.Key.Numpad8,
            Keyboard.Key.Numpad9,
            Keyboard.Key.O,
            Keyboard.Key.P,
            Keyboard.Key.PageDown,
            Keyboard.Key.PageUp,
            Keyboard.Key.Pause,
            Keyboard.Key.Period,
            Keyboard.Key.Q,
            Keyboard.Key.Quote,
            Keyboard.Key.R,
            Keyboard.Key.RAlt,
            Keyboard.Key.RBracket,
            Keyboard.Key.RControl,
            Keyboard.Key.Return,
            Keyboard.Key.Right,
            Keyboard.Key.RShift,
            Keyboard.Key.RSystem,
            Keyboard.Key.S,
            Keyboard.Key.SemiColon,
            Keyboard.Key.Slash,
            Keyboard.Key.Space,
            Keyboard.Key.Subtract,
            Keyboard.Key.T,
            Keyboard.Key.Tab,
            Keyboard.Key.Tilde,
            Keyboard.Key.U,
            Keyboard.Key.Unknown,
            Keyboard.Key.Up,
            Keyboard.Key.V,
            Keyboard.Key.W,
            Keyboard.Key.X,
            Keyboard.Key.Y,
            Keyboard.Key.Z,
        };
        private static char[] DefaultCharMap = new char[]
        {
            'a',
            '+',
            'b',
            (char)8,
            '\\',
            'c',
            ',',
            'd',
            '-',
            (char)0,
            '/',
            DownArrow,
            'e',
            (char)0,
            '=',
            (char)0,
            'f',
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            'g',
            'h',
            (char)0,
            'i',
            (char)0,
            'j',
            'k',
            (char)0,
            'l',
            (char)0,
            '[',
            (char)0,
            LeftArrow,
            (char)0,
            (char)0,
            'm',
            (char)0,
            (char)0,
            'n',
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9',
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9',
            'o',
            'p',
            (char)0,
            (char)0,
            (char)0,
            '.',
            'q',
            '\'',
            'r',
            (char)0,
            ']',
            (char)0,
            '\n',
            RightArrow,
            (char)0,
            (char)0,
            's',
            ';',
            '/',
            ' ',
            '-',
            't',
            (char)0,
            '`',
            'u',
            (char)0,
            UpArrow,
            'v',
            'w',
            'x',
            'y',
            'z'
        };
        private static char[] DefaultShiftCharMap = new char[]
        {
            'A',
            '+',
            'B',
            (char)8,
            '|',
            'C',
            '<',
            'D',
            '_',
            (char)0,
            '/',
            DownArrow,
            'E',
            (char)0,
            '+',
            (char)0,
            'F',
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            (char)0,
            'G',
            'H',
            (char)0,
            'I',
            (char)0,
            'J',
            'K',
            (char)0,
            'L',
            (char)0,
            '{',
            (char)0,
            LeftArrow,
            (char)0,
            (char)0,
            'M',
            (char)0,
            (char)0,
            'N',
            ')',
            '!',
            '@',
            '#',
            '$',
            '%',
            '^',
            '&',
            '*',
            '(',
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9',
            'O',
            'P',
            (char)0,
            (char)0,
            (char)0,
            '>',
            'Q',
            '\"',
            'R',
            (char)0,
            '}',
            (char)0,
            '\n',
            RightArrow,
            (char)0,
            (char)0,
            'S',
            ':',
            '?',
            ' ',
            '-',
            'T',
            (char)0,
            '~',
            'U',
            (char)0,
            UpArrow,
            'V',
            'W',
            'X',
            'Y',
            'Z'
        };

        private char _OutChar;
        private int[] _HoldTimes;

        public char Character { get { return _OutChar; } }

        public KeyController()
        {
            _HoldTimes = new int[Keys.Length];
        }

        public void Update(int DeltaT)
        {
            _OutChar = (char)0;
            bool shift = Keyboard.IsKeyPressed(Keyboard.Key.LShift) || Keyboard.IsKeyPressed(Keyboard.Key.RShift);

            for (int i = 0; i < Keys.Length; i++)
            {
                if (_HoldTimes[i] == 0 && Keyboard.IsKeyPressed(Keys[i]))
                {
                    _OutChar = shift ? DefaultShiftCharMap[i] : DefaultCharMap[i];
                    _HoldTimes[i] = (DeltaT > 0 ? DeltaT : 1);
                }
                else if (!Keyboard.IsKeyPressed(Keys[i])) _HoldTimes[i] = 0;
                else if (_HoldTimes[i] > 0 && Keyboard.IsKeyPressed(Keys[i]))
                {
                    if (_HoldTimes[i] > 600)
                    {
                        if ((_HoldTimes[i] - 600) / 25 < (_HoldTimes[i] - 600 + DeltaT) / 25) _OutChar = shift ? DefaultShiftCharMap[i] : DefaultCharMap[i];
                    }
                    _HoldTimes[i] += DeltaT;
                }
            }
        }

    }
}
